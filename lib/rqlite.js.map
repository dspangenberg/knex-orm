{"version":3,"sources":["../src/rqlite.js"],"names":["rqliteAdapter","connectionString","api","knex","Knex","client","debug","useNullAsDefault","employees","employee","sql","insert","console","log","toString","lowerSql","toLowerCase","startsWith","update","delete","table","create","drop","select","connect","method","getMethod","res","results","body","error","reject","data","resolve"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;;;AACA;;;;AACA;;;;;;IAEqBA,a;;;;;;;;2GASEC,gB;;;;;;uBACF,sBAAQA,gBAAR,C;;;AAAjB,qBAAKC,G;;;;;;;;;;;;;;;;;;;;;;;;;;AAKCC,oB,GAAO,IAAIC,cAAJ,CAAS;AACpBC,0BAAQ,SADY;AAEpBC,yBAAO,IAFa;AAGpBC,oCAAkB;AAHE,iBAAT,C;;;;;;;AAMb,4DAAuBC,mBAAvB,qGAAkC;AAAvBC,0BAAuB;AAC1BC,qBAD0B,GACpBP,KAAK,WAAL,EAAkBQ,MAAlB,CAAyBF,QAAzB,CADoB;;AAEhCG,0BAAQC,GAAR,CAAYH,IAAII,QAAJ,EAAZ;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8BA8BcJ,G,EAAK;AACpB,UAAMR,MAAM,KAAKA,GAAjB;AACA,UAAMa,WAAWL,IAAIM,WAAJ,EAAjB;AACA,UAAID,SAASE,UAAT,CAAoB,QAApB,CAAJ,EAAmC;AACjC,eAAOf,IAAIS,MAAX;AACD;AACD,UAAII,SAASE,UAAT,CAAoB,QAApB,CAAJ,EAAmC;AACjC,eAAOf,IAAIgB,MAAX;AACD;AACD,UAAIH,SAASE,UAAT,CAAoB,QAApB,CAAJ,EAAmC;AACjC,eAAOf,IAAIiB,MAAX;AACD;AACD,UAAIJ,SAASE,UAAT,CAAoB,QAApB,CAAJ,EAAmC;AACjC,eAAOf,IAAIkB,KAAJ,CAAUC,MAAjB;AACD;AACD,UAAIN,SAASE,UAAT,CAAoB,MAApB,CAAJ,EAAiC;AAC/B,eAAOf,IAAIkB,KAAJ,CAAUE,IAAjB;AACD;AACD,aAAOpB,IAAIqB,MAAX;AACD;;;;6GAEiBtB,gB,EAAkBS,G;;;;;;AAClCE,wBAAQC,GAAR,CAAYH,GAAZ;;uBACM,KAAKc,OAAL,CAAavB,gBAAb,C;;;AACAwB,sB,GAAS,KAAKC,SAAL,CAAehB,GAAf,C;;;uBAEKe,OAAOf,GAAP,C;;;AAAZiB,mB;AACAC,uB,GAAUD,IAAIE,IAAJ,CAASD,O;AACnBE,qB,GAAQ,uBAASF,OAAT,C;;qBACVE,K;;;;;kDACK,kBAAQC,MAAR,CAAeD,KAAf,C;;;AAEHE,oB,GAAO,wBAAUJ,OAAV,C;kDACN,kBAAQK,OAAR,CAAgBD,IAAhB,C;;;;;kDAEA,kBAAQD,MAAR,c;;;;;;;;;;;;;;;;;;wBAxFmB;AAC5B,aAAO,KAAK9B,gBAAZ;AACD,K;sBAE2BA,gB,EAAkB;AAC5C,WAAKA,gBAAL,GAAwBA,gBAAxB;AACD;;;;;kBAPkBD,a","file":"rqlite.js","sourcesContent":["import { getError, toPlainJs } from 'rqlite-js/lib/api/results';\n\nimport Knex from 'knex';\nimport connect from 'rqlite-js/lib/api/data/client';\nimport employees from '../db/seeds/employees';\n\nexport default class rqliteAdapter {\n  static get connectionString() {\n    return this.connectionString;\n  }\n\n  static set connectionString(connectionString) {\n    this.connectionString = connectionString;\n  }\n\n  static async connect(connectionString) {\n    this.api = await connect(connectionString);\n  }\n\n\n  static async seeds() {\n    const knex = new Knex({\n      client: 'sqlite3',\n      debug: true,\n      useNullAsDefault: true,\n    });\n\n    for (const employee of employees) {\n      const sql = knex('employees').insert(employee);\n      console.log(sql.toString());\n    }\n  }\n\n  static async migrations() {\n    /*\n    const knex = new Knex({\n      client: 'sqlite3',\n      debug: true,\n      useNullAsDefault: true,\n    });\n\n    const employeesSql = knex.schema.createTable('employees', (table) => {\n      table.increments().primary();\n      table.timestamps();\n\n      table.integer('company_id').unsigned().references('companies.rank');\n\n      table.string('name').notNullable();\n      table.date('birth_date').notNullable();\n      table.integer('zip_code').unsigned();\n    })\n    const companySql = knex.schema.createTable('companies', (table) => {\n      table.increments('rank').primary();\n\n      table.string('name').notNullable();\n      table.string('email').unique();\n    });\n    */\n  }\n\n  static getMethod(sql) {\n    const api = this.api;\n    const lowerSql = sql.toLowerCase();\n    if (lowerSql.startsWith('insert')) {\n      return api.insert;\n    }\n    if (lowerSql.startsWith('update')) {\n      return api.update;\n    }\n    if (lowerSql.startsWith('delete')) {\n      return api.delete;\n    }\n    if (lowerSql.startsWith('create')) {\n      return api.table.create;\n    }\n    if (lowerSql.startsWith('drop')) {\n      return api.table.drop;\n    }\n    return api.select;\n  }\n\n  static async exec(connectionString, sql) {\n    console.log(sql);\n    await this.connect(connectionString);\n    const method = this.getMethod(sql);\n    try {\n      const res = await method(sql);\n      const results = res.body.results;\n      const error = getError(results);\n      if (error) {\n        return Promise.reject(error);\n      }\n      const data = toPlainJs(results);\n      return Promise.resolve(data);\n    } catch (error) {\n      return Promise.reject(error);\n    }\n  }\n}\n"]}