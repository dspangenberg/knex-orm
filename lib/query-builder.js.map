{"version":3,"sources":["../src/query-builder.js"],"names":["QueryBuilder","StaticModel","modelInstance","includedRelations","knexInstance","knex","from","tableName","props","Array","isArray","primaryKey","prop","oldProps","where","first","relationNames","relationEntries","related","length","filter","name","indexOf","relation","add","onFulfilled","onRejected","qb","plugins","plugin","beforeQuery","result","sql","toString","connection","client","config","rqliteConnection","rqliteAdapter","exec","then","res","awaitableQueries","push","applyAsync","all","afterQuery","separator","createQuery","join","method","prototype","queryMethod","Config","KNEX_ALLOWED_QUERY_METHODS"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;;;AACA;;;;;;AAEA;;;;IAIqBA,Y;AACnB,wBAAYC,WAAZ,EAAyBC,aAAzB,EAAwC;AAAA;;AACtC,SAAKD,WAAL,GAAmBA,WAAnB;AACA,SAAKC,aAAL,GAAqBA,aAArB;;AAEA,SAAKC,iBAAL,GAAyB,mBAAzB;AACA,SAAKC,YAAL,GAAoBH,YAAYI,IAAZ,CAAiBC,IAAjB,CAAsBL,YAAYM,SAAlC,CAApB;AACA,QAAIL,aAAJ,EAAmB;AACjB,UAAMM,QAAQ,EAAd;AACA,UAAIC,MAAMC,OAAN,CAAcT,YAAYU,UAA1B,CAAJ,EAA2C;AACzC;AADyC;AAAA;AAAA;;AAAA;AAEzC,0DAAmBV,YAAYU,UAA/B,4GAA2C;AAAA,gBAAhCC,IAAgC;;AACzCJ,kBAAMI,IAAN,IAAcV,cAAcW,QAAd,CAAuBD,IAAvB,KAAgCV,cAAcU,IAAd,CAA9C;AACD;AAJwC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAK1C,OALD,MAKO;AACL;AACA,YAAMA,QAAOX,YAAYU,UAAzB;AACAH,cAAMI,KAAN,IAAcV,cAAcW,QAAd,CAAuBD,KAAvB,KAAgCV,cAAcU,KAAd,CAA9C;AACD;;AAED;AACA,WAAKR,YAAL,GAAoB,KAAKA,YAAL,CAAkBU,KAAlB,CAAwBN,KAAxB,EAA+BO,KAA/B,EAApB;AACD;AACF;;AAED;;;;;;;;;kCAKsB;AAAA,wCAAPP,KAAO;AAAPA,aAAO;AAAA;;AACpB,UAAMQ,gBAAgB,yBAAaR,KAAb,CAAtB;AACA,UAAMS,kBAAkB,uBAAe,KAAKhB,WAAL,CAAiBiB,OAAhC,CAAxB;;AAEA;AACA,UAAIF,cAAcG,MAAd,GAAuB,CAA3B,EAA8B;AAC5BF,wBAAgBG,MAAhB,CAAuB;AAAA;AAAA,cAAEC,IAAF;;AAAA,iBAAYL,cAAcM,OAAd,CAAsBD,IAAtB,KAA+B,CAA3C;AAAA,SAAvB;AACD;;AAED;AAToB;AAAA;AAAA;;AAAA;AAUpB,yDAA+BJ,eAA/B,iHAAgD;AAAA;AAAA,cAApCI,IAAoC;AAAA,cAA9BE,QAA8B;;AAC9CA,mBAASF,IAAT,GAAgBA,IAAhB;AACA,eAAKlB,iBAAL,CAAuBqB,GAAvB,CAA2BD,QAA3B;AACD;AAbmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAepB,aAAO,IAAP;AACD;;AAED;;;;;;;;;2BAMoD;AAAA,UAA/CE,WAA+C,uEAAjC,YAAM,CAAE,CAAyB;AAAA,UAAvBC,UAAuB,uEAAV,YAAM,CAAE,CAAE;;AAClD;AACA,UAAIC,KAAK,IAAT;AAFkD;AAAA;AAAA;;AAAA;AAGlD,yDAAqB,KAAK1B,WAAL,CAAiB2B,OAAtC,iHAA+C;AAAA,cAApCC,MAAoC;;AAC7CF,eAAKE,OAAOC,WAAP,CAAmBH,EAAnB,CAAL;AACD;AALiD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOlD,UAAII,eAAJ;;AAEA,UAAMC,MAAML,GAAGvB,YAAH,CAAgB6B,QAAhB,EAAZ;AACA,UAAMC,aAAaP,GAAGvB,YAAH,CAAgB+B,MAAhB,CAAuBC,MAAvB,CAA8BC,gBAAjD;AACA,aAAOC,iBAAcC,IAAd,CAAmBL,UAAnB,EAA+BF,GAA/B,EAAoCQ,IAApC,CAAyC,UAACC,GAAD,EAAS;AACvD,YAAMC,mBAAmB,EAAzB;AACAX,iBAASU,GAAT;AACA;AACAV,iBAAS,qBAASA,MAAT,EAAiBJ,GAAG1B,WAApB,CAAT;;AAEA;AANuD;AAAA;AAAA;;AAAA;AAOvD,2DAAuB0B,GAAGxB,iBAA1B,iHAA6C;AAAA,gBAAlCoB,QAAkC;;AAC3CmB,6BAAiBC,IAAjB,CAAsBpB,SAASqB,UAAT,CAAoBb,MAApB,CAAtB;AACD;AATsD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAWvD,eAAO,kBAAQc,GAAR,CAAYH,gBAAZ,CAAP;AACD,OAZM,EAaJF,IAbI,CAaC,YAAM;AACV;AADU;AAAA;AAAA;;AAAA;AAEV,2DAAqBb,GAAG1B,WAAH,CAAe2B,OAApC,iHAA6C;AAAA,gBAAlCC,MAAkC;;AAC3CE,qBAASF,OAAOiB,UAAP,CAAkBf,MAAlB,CAAT;AACD;AAJS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMV,eAAOA,MAAP;AACD,OApBI,EAqBJS,IArBI,CAqBCf,WArBD,EAqBcC,UArBd,CAAP;AAsBD;;AAED;;;;;;;;;+BAM2B;AAAA,UAAlBqB,SAAkB,uEAAN,IAAM;;AACzB;AACA,UAAIpB,KAAK,IAAT;AAFyB;AAAA;AAAA;;AAAA;AAGzB,yDAAqB,KAAK1B,WAAL,CAAiB2B,OAAtC,iHAA+C;AAAA,cAApCC,MAAoC;;AAC7CF,eAAKE,OAAOC,WAAP,CAAmBH,EAAnB,CAAL;AACD;;AAED;AAPyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQzB,UAAMI,SAAS,CAACJ,GAAGvB,YAAH,CAAgB6B,QAAhB,EAAD,CAAf;AARyB;AAAA;AAAA;;AAAA;AASzB,yDAAuBN,GAAGxB,iBAA1B,iHAA6C;AAAA,cAAlCoB,QAAkC;;AAC3C;AACAQ,iBAAOY,IAAP,CAAYpB,SAASyB,WAAT,CAAqB,EAArB,EAAyBf,QAAzB,EAAZ;AACD;AAZwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAczB,aAAOF,OAAOkB,IAAP,CAAYF,SAAZ,CAAP;AACD;;;;;AAGH;;;kBAjHqB/C,Y;;;;;;;QAkHVkD,M;;AACTlD,iBAAamD,SAAb,CAAuBD,MAAvB,IAAiC,SAASE,WAAT,GAA8B;AAAA;;AAC7D;AACA,WAAKhD,YAAL,GAAoB,sBAAKA,YAAL,EAAkB8C,MAAlB,iCAApB;AACA,aAAO,IAAP;AACD,KAJD;;;AADF,mDAAqBG,iBAAOC,0BAA5B,iHAAwD;AAAA;AAMvD","file":"query-builder.js","sourcesContent":["import { flattenArray, modelize } from './utils';\n\nimport Config from './config';\nimport rqliteAdapter from './rqlite';\n\n/**\n * Represents a query builder which corresponds to a static Model reference.\n * Inherits every query method of the Knex query builder.\n */\nexport default class QueryBuilder {\n  constructor(StaticModel, modelInstance) {\n    this.StaticModel = StaticModel;\n    this.modelInstance = modelInstance;\n\n    this.includedRelations = new Set();\n    this.knexInstance = StaticModel.knex.from(StaticModel.tableName);\n    if (modelInstance) {\n      const props = {};\n      if (Array.isArray(StaticModel.primaryKey)) {\n        // Handle composite primary keys\n        for (const prop of StaticModel.primaryKey) {\n          props[prop] = modelInstance.oldProps[prop] || modelInstance[prop];\n        }\n      } else {\n        // Handle single primary key\n        const prop = StaticModel.primaryKey;\n        props[prop] = modelInstance.oldProps[prop] || modelInstance[prop];\n      }\n\n      // Filter to the given model instance\n      this.knexInstance = this.knexInstance.where(props).first();\n    }\n  }\n\n  /**\n   * Queues fetching the given related Models of the queryable instance(s).\n   * @param {...string} props Relation attributes to be fetched.\n   * @returns {QueryBuilder}\n   */\n  withRelated(...props) {\n    const relationNames = flattenArray(props);\n    const relationEntries = Object.entries(this.StaticModel.related);\n\n    // Filter the given relations by name if necessary\n    if (relationNames.length > 0) {\n      relationEntries.filter(([name]) => relationNames.indexOf(name) >= 0);\n    }\n\n    // Store the filtered relations\n    for (const [name, relation] of relationEntries) {\n      relation.name = name;\n      this.includedRelations.add(relation);\n    }\n\n    return this;\n  }\n\n  /**\n   * Executes the query.\n   * @param {Function<Object>} [onFulfilled] Success handler function.\n   * @param {Function<Object>} [onRejected] Error handler function.\n   * @returns {Promise<Object>}\n   */\n  then(onFulfilled = () => {}, onRejected = () => {}) {\n    // Apply the effect of plugins\n    let qb = this;\n    for (const plugin of this.StaticModel.plugins) {\n      qb = plugin.beforeQuery(qb);\n    }\n\n    let result;\n\n    const sql = qb.knexInstance.toString();\n    const connection = qb.knexInstance.client.config.rqliteConnection;\n    return rqliteAdapter.exec(connection, sql).then((res) => {\n      const awaitableQueries = [];\n      result = res;\n      // Convert the result to a specific Model type if necessary\n      result = modelize(result, qb.StaticModel);\n\n      // Apply each desired relation to the original result\n      for (const relation of qb.includedRelations) {\n        awaitableQueries.push(relation.applyAsync(result));\n      }\n\n      return Promise.all(awaitableQueries);\n    })\n      .then(() => {\n        // Apply the effect of plugins\n        for (const plugin of qb.StaticModel.plugins) {\n          result = plugin.afterQuery(result);\n        }\n\n        return result;\n      })\n      .then(onFulfilled, onRejected);\n  }\n\n  /**\n   * Gets the list of raw queries to be executed, joined by a string separator.\n   * @param {string} [separator=\\n] Separator string to be used for joining\n   * multiple raw query strings.\n   * @returns {string}\n   */\n  toString(separator = '\\n') {\n    // Apply the effect of plugins\n    let qb = this;\n    for (const plugin of this.StaticModel.plugins) {\n      qb = plugin.beforeQuery(qb);\n    }\n\n    // Return a list of query strings to be executed, including Relations\n    const result = [qb.knexInstance.toString()];\n    for (const relation of qb.includedRelations) {\n      // Create the relation query with an empty array of Models\n      result.push(relation.createQuery([]).toString());\n    }\n\n    return result.join(separator);\n  }\n}\n\n// Inherit Knex query methods\nfor (const method of Config.KNEX_ALLOWED_QUERY_METHODS) {\n  QueryBuilder.prototype[method] = function queryMethod(...args) {\n    // Update Knex state\n    this.knexInstance = this.knexInstance[method](...args);\n    return this;\n  };\n}\n"]}