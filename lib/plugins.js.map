{"version":3,"sources":["../src/plugins.js"],"names":["CaseConverterPlugin","BaseModel","formatterPrototype","knex","client","Formatter","prototype","originalFunction","_wrapString","value","call","res","options","afterQuery","transformKeys","key","obj","transformer","ModelBase","Array","isArray","map","item","result","PluginBase","ValidationPlugin","qb","beforeQuery","model","modelInstance","validate"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;AACA;;;;;;IAEaA,mB,WAAAA,mB;;;;;;;;;;yBACNC,S,EAAW;AACd,UAAMC,qBAAqBD,UAAUE,IAAV,CAAeC,MAAf,CAAsBC,SAAtB,CAAgCC,SAA3D;;AAEA;AACA;AACA,UAAMC,mBAAmBL,mBAAmBM,WAA5C;AACAN,yBAAmBM,WAAnB,GAAiC,SAASA,WAAT,CAAqBC,KAArB,EAA4B;AAC3D,eAAO,4BAAWF,iBAAiBG,IAAjB,CAAsB,IAAtB,EAA4BD,KAA5B,CAAX,CAAP;AACD,OAFD;AAGA;;AAEA,aAAO,IAAP;AACD;;;+BAEUE,G,EAAK;AACd,UAAI,CAAC,KAAKC,OAAL,CAAaC,UAAlB,EAA8B,OAAOF,GAAP;;AAE9B,aAAO,KAAKG,aAAL,CAAmBH,GAAnB,EAAwB,UAACI,GAAD;AAAA,eAAS,0BAASA,GAAT,EAAc,IAAd,CAAT;AAAA,OAAxB,CAAP;AACD;;AAED;;;;;;;;;;kCAOcC,G,EAAKC,W,EAAa;AAAA;;AAC9B;AACA,UAAI,EAAED,eAAeE,mBAAjB,CAAJ,EAAiC,OAAOF,GAAP;;AAEjC;AACA,UAAIG,MAAMC,OAAN,CAAcJ,GAAd,CAAJ,EAAwB;AACtB,eAAOA,IAAIK,GAAJ,CAAQ,UAACC,IAAD;AAAA,iBAAU,OAAKR,aAAL,CAAmBQ,IAAnB,EAAyBL,WAAzB,CAAV;AAAA,SAAR,CAAP;AACD;;AAED,UAAMM,SAAS,EAAf;AAT8B;AAAA;AAAA;;AAAA;AAU9B,wDAA2B,uBAAeP,GAAf,CAA3B,4GAAgD;AAAA;AAAA,cAApCD,GAAoC;AAAA,cAA/BN,KAA+B;;AAC9Cc,iBAAON,YAAYF,GAAZ,CAAP,IAA2BN,KAA3B;AACD;;AAED;AAd8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAe9B,aAAO,sBAAc,8BAAsBO,GAAtB,CAAd,EAA0CO,MAA1C,CAAP;AACD;;;EA5CsCC,oB;;IA+C5BC,gB,WAAAA,gB;;;;;;;;;;gCACCC,E,EAAI;AACd,UAAI,CAAC,KAAKd,OAAL,CAAae,WAAlB,EAA+B,OAAOD,EAAP;;AAE/B,UAAME,QAAQF,GAAGG,aAAjB;AACA,UAAID,KAAJ,EAAW;AACTA,cAAME,QAAN;AACD;;AAED,aAAOJ,EAAP;AACD;;;+BAEUf,G,EAAK;AACd,UAAI,CAAC,KAAKC,OAAL,CAAaC,UAAlB,EAA8B,OAAOF,GAAP;;AAE9B,UAAIA,eAAeO,mBAAnB,EAA8B;AAC5BP,YAAImB,QAAJ;AACD;;AAED,aAAOnB,GAAP;AACD;;;EApBmCa,oB","file":"plugins.js","sourcesContent":["import { camelize, underscore } from 'inflection';\nimport ModelBase from './model-base';\nimport PluginBase from './plugin-base';\n\nexport class CaseConverterPlugin extends PluginBase {\n  init(BaseModel) {\n    const formatterPrototype = BaseModel.knex.client.Formatter.prototype;\n\n    // Override a Knex query formatter function by extending it\n    /* eslint-disable no-underscore-dangle */\n    const originalFunction = formatterPrototype._wrapString;\n    formatterPrototype._wrapString = function _wrapString(value) {\n      return underscore(originalFunction.call(this, value));\n    };\n    /* eslint-enable */\n\n    return this;\n  }\n\n  afterQuery(res) {\n    if (!this.options.afterQuery) return res;\n\n    return this.transformKeys(res, (key) => camelize(key, true));\n  }\n\n  /**\n   * Transforms the keys of the given object.\n   * @param {Object} obj Object to be transformed.\n   * @param {Function<string>} transformer Transformation function to be used.\n   * @returns {Object} The transformed object.\n   * @private\n   */\n  transformKeys(obj, transformer) {\n    // Don't transform the keys of non-objects\n    if (!(obj instanceof ModelBase)) return obj;\n\n    // Support recursive array transformation\n    if (Array.isArray(obj)) {\n      return obj.map((item) => this.transformKeys(item, transformer));\n    }\n\n    const result = {};\n    for (const [key, value] of Object.entries(obj)) {\n      result[transformer(key)] = value;\n    }\n\n    // Assign the appropriate prototype to the result\n    return Object.create(Object.getPrototypeOf(obj), result);\n  }\n}\n\nexport class ValidationPlugin extends PluginBase {\n  beforeQuery(qb) {\n    if (!this.options.beforeQuery) return qb;\n\n    const model = qb.modelInstance;\n    if (model) {\n      model.validate();\n    }\n\n    return qb;\n  }\n\n  afterQuery(res) {\n    if (!this.options.afterQuery) return res;\n\n    if (res instanceof ModelBase) {\n      res.validate();\n    }\n\n    return res;\n  }\n}\n"]}