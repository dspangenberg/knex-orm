{"version":3,"sources":["../src/errors.js"],"names":["DuplicateModelError","name","ErrorBase","EmptyModelError","RelationError","UnidentifiedModelError","ValidationError","data"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAEA;;;;IAIaA,mB,WAAAA,mB;;;AASX,+BAAYC,IAAZ,EAAkB;AAAA;;AAAA,uLACUA,IADV;;AAEhB,UAAKA,IAAL,GAAYA,IAAZ;AAFgB;AAGjB;AAXD;;;;;;;;;EADuCC,kB;;AAezC;;;;;IAGaC,e,WAAAA,e;;;AACX,6BAAc;AAAA;AAAA,mJACN,8BADM;AAEb;;;EAHkCD,kB;;AAMrC;;;;;IAGaE,a,WAAAA,a;;;AACX,2BAAc;AAAA;AAAA,+IACN,4DADM;AAEb;;;EAHgCF,kB;;AAMnC;;;;;;IAIaG,sB,WAAAA,sB;;;AACX,oCAAc;AAAA;AAAA,iKACN,mEADM;AAEb;;;EAHyCH,kB;;AAM5C;;;;;;IAIaI,e,WAAAA,e;;;AASX,2BAAYC,IAAZ,EAAkB;AAAA;;AAAA,yJACV,mEADU;;AAEhB,WAAKA,IAAL,GAAYA,IAAZ;AAFgB;AAGjB;AAXD;;;;;;;;;EADmCL,kB","file":"errors.js","sourcesContent":["import ErrorBase from 'es6-error';\n\n/**\n * An error which gets thrown when an attempt is made to register a Model\n * multiple times.\n */\nexport class DuplicateModelError extends ErrorBase {\n  /**\n   * Name of the Model in question.\n   * @type {string}\n   * @memberof DuplicateModelError\n   * @instance\n   */\n  name;\n\n  constructor(name) {\n    super(`Model with name '${name}' cannot be registered multiple times`);\n    this.name = name;\n  }\n}\n\n/**\n * An error which gets thrown when an attempt is made to store an empty Model.\n */\nexport class EmptyModelError extends ErrorBase {\n  constructor() {\n    super('Empty Model cannot be stored');\n  }\n}\n\n/**\n * An error which gets thrown when a Relation does not behave as expected.\n */\nexport class RelationError extends ErrorBase {\n  constructor() {\n    super('One-to-one and many-to-one Relations cannot be re-assigned');\n  }\n}\n\n/**\n * An error which gets thrown when an attempt is made to modify a Model instance\n * without specifying its primary key.\n */\nexport class UnidentifiedModelError extends ErrorBase {\n  constructor() {\n    super('Model cannot be identified without specifying a primary key value');\n  }\n}\n\n/**\n * An error which gets thrown when a Model cannot be successfully validated\n * against its JSON Schema.\n */\nexport class ValidationError extends ErrorBase {\n  /**\n   * Detailed information about why the validation has failed.\n   * @type {?Object}\n   * @memberof ValidationError\n   * @instance\n   */\n  data;\n\n  constructor(data) {\n    super('Model could not be successfully validated against its JSON Schema');\n    this.data = data;\n  }\n}\n"]}